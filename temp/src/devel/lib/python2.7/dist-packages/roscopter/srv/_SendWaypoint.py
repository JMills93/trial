"""autogenerated by genpy from roscopter/SendWaypointRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import roscopter.msg

class SendWaypointRequest(genpy.Message):
  _md5sum = "d5e91ece00199d55c16efd2c9c4801c9"
  _type = "roscopter/SendWaypointRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Waypoint waypoint

================================================================================
MSG: roscopter/Waypoint
# latitude and longitude given in decimal degrees (* 10^7)
int32 latitude
int32 longitude

# height in mm
int32 altitude

# posAcc given in mm
uint16 pos_acc

# max speed to travel to waypoint in % of 100
uint8 speed_to

# time to stay at waypoint in ms
uint16 hold_time

# yawFrom angle given in degrees (* 1000)
int32 yaw_from

# camera pan and tilt angles during waypoint travel given in degrees (* 1000)
int32 pan_angle
int32 tilt_angle

# Type of Waypoint
uint8 waypoint_type

uint8 TYPE_NAV = 1
uint8 TYPE_CONDITION_YAW = 2
uint8 TYPE_CONDITION_CHANGE_ALT = 3
uint8 TYPE_TAKEOFF = 4

"""
  __slots__ = ['waypoint']
  _slot_types = ['roscopter/Waypoint']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       waypoint

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SendWaypointRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.waypoint is None:
        self.waypoint = roscopter.msg.Waypoint()
    else:
      self.waypoint = roscopter.msg.Waypoint()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3iHBH3iB.pack(_x.waypoint.latitude, _x.waypoint.longitude, _x.waypoint.altitude, _x.waypoint.pos_acc, _x.waypoint.speed_to, _x.waypoint.hold_time, _x.waypoint.yaw_from, _x.waypoint.pan_angle, _x.waypoint.tilt_angle, _x.waypoint.waypoint_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.waypoint is None:
        self.waypoint = roscopter.msg.Waypoint()
      end = 0
      _x = self
      start = end
      end += 30
      (_x.waypoint.latitude, _x.waypoint.longitude, _x.waypoint.altitude, _x.waypoint.pos_acc, _x.waypoint.speed_to, _x.waypoint.hold_time, _x.waypoint.yaw_from, _x.waypoint.pan_angle, _x.waypoint.tilt_angle, _x.waypoint.waypoint_type,) = _struct_3iHBH3iB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3iHBH3iB.pack(_x.waypoint.latitude, _x.waypoint.longitude, _x.waypoint.altitude, _x.waypoint.pos_acc, _x.waypoint.speed_to, _x.waypoint.hold_time, _x.waypoint.yaw_from, _x.waypoint.pan_angle, _x.waypoint.tilt_angle, _x.waypoint.waypoint_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.waypoint is None:
        self.waypoint = roscopter.msg.Waypoint()
      end = 0
      _x = self
      start = end
      end += 30
      (_x.waypoint.latitude, _x.waypoint.longitude, _x.waypoint.altitude, _x.waypoint.pos_acc, _x.waypoint.speed_to, _x.waypoint.hold_time, _x.waypoint.yaw_from, _x.waypoint.pan_angle, _x.waypoint.tilt_angle, _x.waypoint.waypoint_type,) = _struct_3iHBH3iB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3iHBH3iB = struct.Struct("<3iHBH3iB")
"""autogenerated by genpy from roscopter/SendWaypointResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SendWaypointResponse(genpy.Message):
  _md5sum = "eb13ac1f1354ccecb7941ee8fa2192e8"
  _type = "roscopter/SendWaypointResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool result


"""
  __slots__ = ['result']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SendWaypointResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = False
    else:
      self.result = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.result))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _struct_B.unpack(str[start:end])
      self.result = bool(self.result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.result))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _struct_B.unpack(str[start:end])
      self.result = bool(self.result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
class SendWaypoint(object):
  _type          = 'roscopter/SendWaypoint'
  _md5sum = 'e5f60840a7c8257ef80f2e79965e13d9'
  _request_class  = SendWaypointRequest
  _response_class = SendWaypointResponse
